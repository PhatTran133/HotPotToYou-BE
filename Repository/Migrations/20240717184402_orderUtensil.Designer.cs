// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.DbContexts;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240717184402_orderUtensil")]
    partial class orderUtensil
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repository.Entity.ConfigTable.ActivityTypeEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ActivityType");
                });

            modelBuilder.Entity("Repository.Entity.ConfigTable.HotPotFlavorEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("HotPotFlavor");
                });

            modelBuilder.Entity("Repository.Entity.ConfigTable.HotPotTypeEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("HotPotType");
                });

            modelBuilder.Entity("Repository.Entity.ConfigTable.IngredientGroupEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("IngredientGroup");
                });

            modelBuilder.Entity("Repository.Entity.ConfigTable.PaymentEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Repository.Entity.ConfigTable.RoleEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Repository.Entity.CustomerEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("YearOfBirth")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Repository.Entity.HotPotEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlavorID")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.Property<string>("UpdateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FlavorID");

                    b.HasIndex("TypeID");

                    b.ToTable("HotPot");
                });

            modelBuilder.Entity("Repository.Entity.HotPotIngredientEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("HotpotID")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("HotpotID")
                        .IsUnique();

                    b.HasIndex("IngredientId")
                        .IsUnique();

                    b.ToTable("HotPotIngredient");
                });

            modelBuilder.Entity("Repository.Entity.HotPotPackageEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotPotID")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("UpdateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("HotPotID")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("HotPotPackage");
                });

            modelBuilder.Entity("Repository.Entity.HotPotUtensilTypeEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("HotPotTypeID")
                        .HasColumnType("int");

                    b.Property<int>("UtensilID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("HotPotTypeID")
                        .IsUnique();

                    b.HasIndex("UtensilID")
                        .IsUnique();

                    b.ToTable("HotPotUtensilType");
                });

            modelBuilder.Entity("Repository.Entity.IngredientEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("Repository.Entity.OrderActivityEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ActivityTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ActivityTypeID")
                        .IsUnique();

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("OrderActivity");
                });

            modelBuilder.Entity("Repository.Entity.OrderEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("DeleteByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("UpdateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.HasIndex("PaymentID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Repository.Entity.OrderUtensilEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("UpdateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UtensilID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("UtensilPackageID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("UtensilID")
                        .IsUnique();

                    b.HasIndex("UtensilPackageID")
                        .IsUnique();

                    b.ToTable("OrderUtensil");
                });

            modelBuilder.Entity("Repository.Entity.UserEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Repository.Entity.UtensilDetailEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<int>("UtensilID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PackageID")
                        .IsUnique();

                    b.HasIndex("UtensilID")
                        .IsUnique();

                    b.ToTable("UtensilDetai");
                });

            modelBuilder.Entity("Repository.Entity.UtensilEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Utensil");
                });

            modelBuilder.Entity("Repository.Entity.UtensilPackageEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxPeople")
                        .HasColumnType("int");

                    b.Property<int>("MinPeople")
                        .HasColumnType("int");

                    b.Property<string>("UpdateByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("UntensilPackage");
                });

            modelBuilder.Entity("Repository.Entity.CustomerEntity", b =>
                {
                    b.HasOne("Repository.Entity.UserEntity", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Repository.Entity.CustomerEntity", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entity.HotPotEntity", b =>
                {
                    b.HasOne("Repository.Entity.ConfigTable.HotPotFlavorEntity", "HotPotFlavor")
                        .WithMany("HotPot")
                        .HasForeignKey("FlavorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entity.ConfigTable.HotPotTypeEntity", "HotPotType")
                        .WithMany("HotPot")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotPotFlavor");

                    b.Navigation("HotPotType");
                });

            modelBuilder.Entity("Repository.Entity.HotPotIngredientEntity", b =>
                {
                    b.HasOne("Repository.Entity.HotPotEntity", "HotPot")
                        .WithOne("HotPotIngredient")
                        .HasForeignKey("Repository.Entity.HotPotIngredientEntity", "HotpotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entity.IngredientEntity", "Ingredient")
                        .WithOne("HotPotIngredient")
                        .HasForeignKey("Repository.Entity.HotPotIngredientEntity", "IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotPot");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Repository.Entity.HotPotPackageEntity", b =>
                {
                    b.HasOne("Repository.Entity.HotPotEntity", "HotPot")
                        .WithOne("HotPotPackage")
                        .HasForeignKey("Repository.Entity.HotPotPackageEntity", "HotPotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entity.OrderEntity", "Order")
                        .WithMany("HotPotPackages")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotPot");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Repository.Entity.HotPotUtensilTypeEntity", b =>
                {
                    b.HasOne("Repository.Entity.ConfigTable.HotPotTypeEntity", "HotPotType")
                        .WithOne("HotPotUtensilType")
                        .HasForeignKey("Repository.Entity.HotPotUtensilTypeEntity", "HotPotTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entity.UtensilEntity", "Utensil")
                        .WithOne("HotPotUtensilType")
                        .HasForeignKey("Repository.Entity.HotPotUtensilTypeEntity", "UtensilID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotPotType");

                    b.Navigation("Utensil");
                });

            modelBuilder.Entity("Repository.Entity.IngredientEntity", b =>
                {
                    b.HasOne("Repository.Entity.ConfigTable.IngredientGroupEntity", "IngredientGroup")
                        .WithMany("Ingredient")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IngredientGroup");
                });

            modelBuilder.Entity("Repository.Entity.OrderActivityEntity", b =>
                {
                    b.HasOne("Repository.Entity.ConfigTable.ActivityTypeEntity", "ActivityType")
                        .WithOne("OrderActivity")
                        .HasForeignKey("Repository.Entity.OrderActivityEntity", "ActivityTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entity.OrderEntity", "Order")
                        .WithOne("OrderActivity")
                        .HasForeignKey("Repository.Entity.OrderActivityEntity", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Repository.Entity.OrderEntity", b =>
                {
                    b.HasOne("Repository.Entity.CustomerEntity", "Customer")
                        .WithOne("Order")
                        .HasForeignKey("Repository.Entity.OrderEntity", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entity.ConfigTable.PaymentEntity", "Payment")
                        .WithMany("Order")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Repository.Entity.OrderUtensilEntity", b =>
                {
                    b.HasOne("Repository.Entity.OrderEntity", "Order")
                        .WithMany("OrderUtensils")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entity.UtensilEntity", "Utensil")
                        .WithOne("OrderUtensil")
                        .HasForeignKey("Repository.Entity.OrderUtensilEntity", "UtensilID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entity.UtensilPackageEntity", "UtensilPackage")
                        .WithOne("OrderUtensil")
                        .HasForeignKey("Repository.Entity.OrderUtensilEntity", "UtensilPackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Utensil");

                    b.Navigation("UtensilPackage");
                });

            modelBuilder.Entity("Repository.Entity.UserEntity", b =>
                {
                    b.HasOne("Repository.Entity.ConfigTable.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Repository.Entity.UtensilDetailEntity", b =>
                {
                    b.HasOne("Repository.Entity.UtensilPackageEntity", "UtensilPackage")
                        .WithOne("UtensilDetail")
                        .HasForeignKey("Repository.Entity.UtensilDetailEntity", "PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entity.UtensilEntity", "Utensil")
                        .WithOne("UtensilDetail")
                        .HasForeignKey("Repository.Entity.UtensilDetailEntity", "UtensilID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utensil");

                    b.Navigation("UtensilPackage");
                });

            modelBuilder.Entity("Repository.Entity.ConfigTable.ActivityTypeEntity", b =>
                {
                    b.Navigation("OrderActivity")
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Entity.ConfigTable.HotPotFlavorEntity", b =>
                {
                    b.Navigation("HotPot");
                });

            modelBuilder.Entity("Repository.Entity.ConfigTable.HotPotTypeEntity", b =>
                {
                    b.Navigation("HotPot");

                    b.Navigation("HotPotUtensilType")
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Entity.ConfigTable.IngredientGroupEntity", b =>
                {
                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Repository.Entity.ConfigTable.PaymentEntity", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Repository.Entity.CustomerEntity", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Entity.HotPotEntity", b =>
                {
                    b.Navigation("HotPotIngredient")
                        .IsRequired();

                    b.Navigation("HotPotPackage")
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Entity.IngredientEntity", b =>
                {
                    b.Navigation("HotPotIngredient")
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Entity.OrderEntity", b =>
                {
                    b.Navigation("HotPotPackages");

                    b.Navigation("OrderActivity")
                        .IsRequired();

                    b.Navigation("OrderUtensils");
                });

            modelBuilder.Entity("Repository.Entity.UserEntity", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Entity.UtensilEntity", b =>
                {
                    b.Navigation("HotPotUtensilType")
                        .IsRequired();

                    b.Navigation("OrderUtensil")
                        .IsRequired();

                    b.Navigation("UtensilDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Entity.UtensilPackageEntity", b =>
                {
                    b.Navigation("OrderUtensil")
                        .IsRequired();

                    b.Navigation("UtensilDetail")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
